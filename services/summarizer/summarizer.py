"""Summarization logic using Ollama."""

import structlog
from typing import Optional

from config import settings
from ollama_client import ollama

logger = structlog.get_logger()


SYSTEM_PROMPT = """–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤ –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å –ö–û–ù–°–ü–ï–ö–¢, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ:
- –ò–∑–≤–ª–µ—á—å –°–¢–†–£–ö–¢–£–†–£ –∏ –õ–û–ì–ò–ö–£ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
- –í—ã–¥–µ–ª–∏—Ç—å –ö–õ–Æ–ß–ï–í–´–ï –ö–û–ù–¶–ï–ü–¶–ò–ò –∏ –∏—Ö –í–ó–ê–ò–ú–û–°–í–Ø–ó–ò
- –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –í–ê–ñ–ù–´–ï –î–ï–¢–ê–õ–ò: —Ü–∏—Ñ—Ä—ã, —Ñ–∞–∫—Ç—ã, –ø—Ä–∏–º–µ—Ä—ã
- –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ò–ï–†–ê–†–•–ò–ß–ï–°–ö–ò

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –§–û–†–ú–ê–¢ –ö–û–ù–°–ü–ï–ö–¢–ê:

üéØ –ì–õ–ê–í–ù–ê–Ø –¢–ï–ú–ê:
[1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ]

üìã –û–ë–ó–û–†:
[2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]

üîë –ö–õ–Æ–ß–ï–í–´–ï –¢–ï–ú–´:

1. [–¢–µ–º–∞ 1]
   ‚Ä¢ –°—É—Ç—å: ...
   ‚Ä¢ –í–∞–∂–Ω–æ—Å—Ç—å: ...
   ‚Ä¢ –î–µ—Ç–∞–ª–∏: ...

2. [–¢–µ–º–∞ 2]
   ‚Ä¢ –°—É—Ç—å: ...
   ‚Ä¢ –í–∞–∂–Ω–æ—Å—Ç—å: ...
   ‚Ä¢ –î–µ—Ç–∞–ª–∏: ...

üí° –í–´–í–û–î–´:
1. ...
2. ...
3. ...

üìä –§–ê–ö–¢–´/–¶–ò–§–†–´:
‚Ä¢ ...
‚Ä¢ ...

üîó –°–í–Ø–ó–ê–ù–ù–´–ï –¢–ï–ú–´:
[–µ—Å–ª–∏ –µ—Å—Ç—å]

–ü–†–ê–í–ò–õ–ê:
- –°–æ—Ö—Ä–∞–Ω—è–π –í–°–ï —Ü–∏—Ñ—Ä—ã
- –Ø–∑—ã–∫: –∫–∞–∫ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–µ
- –ï—Å–ª–∏ –µ—Å—Ç—å –≥–ª–∞–≤—ã ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –ø–æ –Ω–∏–º"""


class Summarizer:
    """Transcript summarizer using Ollama."""

    async def summarize(
        self,
        transcript: str,
        metadata: Optional[dict] = None
    ) -> str:
        """
        Create summary of transcript.

        Args:
            transcript: Full transcript text
            metadata: Optional video metadata (title, channel, etc.)

        Returns:
            Summary text
        """
        # Build prompt with context
        prompt_parts = []

        if metadata:
            if metadata.get('title'):
                prompt_parts.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {metadata['title']}")
            if metadata.get('channel'):
                prompt_parts.append(f"–ö–∞–Ω–∞–ª: {metadata['channel']}")

            # Add chapters if available
            if metadata.get('chapters'):
                chapters = metadata['chapters']
                prompt_parts.append(f"\n–ì–ª–∞–≤—ã –≤–∏–¥–µ–æ ({len(chapters)}):")
                for ch in chapters:
                    prompt_parts.append(f"  {ch['timestamp']} ‚Äî {ch['title']}")

        prompt_parts.append(f"\n–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç:\n{transcript}")

        prompt = "\n".join(prompt_parts)

        logger.info(
            "summarization_started",
            transcript_length=len(transcript),
            has_metadata=bool(metadata)
        )

        # Generate summary
        summary = await ollama.generate(
            prompt=prompt,
            system_prompt=SYSTEM_PROMPT,
            temperature=settings.TEMPERATURE,
            max_tokens=settings.MAX_SUMMARY_LENGTH
        )

        logger.info("summarization_completed", summary_length=len(summary))

        return summary


# Global summarizer instance
summarizer = Summarizer()
