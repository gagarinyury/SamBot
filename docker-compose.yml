services:
  # PostgreSQL with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: sambot_v2_postgres
    environment:
      POSTGRES_DB: sambot_v2
      POSTGRES_USER: sambot
      POSTGRES_PASSWORD: ${DB_PASSWORD:-sambot_secure_pass_change_me}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sambot -d sambot_v2"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - sambot_network
    restart: unless-stopped

  # Redis for task queues and caching
  redis:
    image: redis:7-alpine
    container_name: sambot_v2_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - sambot_network
    restart: unless-stopped

  # PO Token Provider - DISABLED
  # Not used anymore - causes more blocking than it prevents
  # YouTube extraction works better without POT tokens
  # pot_provider:
  #   image: brainicism/bgutil-ytdlp-pot-provider:latest
  #   container_name: sambot_v2_pot_provider
  #   ports:
  #     - "4416:4416"
  #   init: true
  #   networks:
  #     - sambot_network
  #   restart: unless-stopped

  # Content Extractor Service (Universal: yt-dlp based)
  content_extractor:
    build: ./services/content_extractor
    container_name: sambot_v2_content_extractor
    environment:
      DATABASE_URL: postgresql://sambot:${DB_PASSWORD:-sambot_secure_pass_change_me}@postgres:5432/sambot_v2
      AUDIO_STORAGE_PATH: /app/audio_storage
      AUTO_CLEANUP_DAYS: 7
      MAX_AUDIO_QUALITY: 192
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      COOKIES_FILE: /app/cookies.txt
      YOUTUBE_API_KEY: ${YOUTUBE_API_KEY:-}
    volumes:
      - audio_storage:/app/audio_storage
      - ./cookies.txt:/app/cookies.txt
      - whisper_models:/root/.cache/huggingface
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8001:8000"
    networks:
      - sambot_network
    restart: unless-stopped

  # Summarizer Service - AI-powered content summarization
  # Uses host Ollama on localhost:11434
  summarizer:
    build: ./services/summarizer
    container_name: sambot_v2_summarizer
    environment:
      DATABASE_URL: postgresql://sambot:${DB_PASSWORD:-sambot_secure_pass_change_me}@postgres:5432/sambot_v2
      OLLAMA_URL: http://host.docker.internal:11434
      MODEL_NAME: ${SUMMARIZER_MODEL:-qwen2.5:7b-instruct-q4_K_M}
      MAX_SUMMARY_LENGTH: ${MAX_SUMMARY_LENGTH:-500}
      TEMPERATURE: ${TEMPERATURE:-0.3}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8002:8000"
    networks:
      - sambot_network
    restart: unless-stopped

  # RAG Service - Semantic search and Q&A over transcripts
  rag_service:
    build: ./services/rag_service
    container_name: sambot_v2_rag
    environment:
      DATABASE_URL: postgresql://sambot:${DB_PASSWORD:-sambot_secure_pass_change_me}@postgres:5432/sambot_v2
      OLLAMA_URL: http://host.docker.internal:11434
      EMBEDDING_MODEL: ${EMBEDDING_MODEL:-nomic-embed-text}
      LLM_MODEL: ${LLM_MODEL:-qwen2.5:7b-instruct-q4_K_M}
      EMBEDDING_DIMENSION: ${EMBEDDING_DIMENSION:-768}
      TOP_K_RESULTS: ${TOP_K_RESULTS:-3}
      SIMILARITY_THRESHOLD: ${SIMILARITY_THRESHOLD:-0.7}
      TEMPERATURE: ${TEMPERATURE:-0.3}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8003:8000"
    networks:
      - sambot_network
    restart: unless-stopped

  # Background Worker - Auto-embedding and summarization pipeline
  worker:
    build: ./services/worker
    container_name: sambot_v2_worker
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RAG_SERVICE_URL: http://rag_service:8000
      SUMMARIZER_URL: http://summarizer:8000
      WORKER_QUEUES: embedding,summarization,default
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
      rag_service:
        condition: service_started
      summarizer:
        condition: service_started
    networks:
      - sambot_network
    restart: unless-stopped

  # Web UI - Simple interface for content extraction
  web_ui:
    build: ./services/web_ui
    container_name: sambot_v2_web_ui
    environment:
      EXTRACTOR_URL: http://content_extractor:8000
      SUMMARIZER_URL: http://summarizer:8000
      RAG_SERVICE_URL: http://rag_service:8000
      YOUTUBE_API_KEY: ${YOUTUBE_API_KEY:-}
      FLASK_DEBUG: ${FLASK_DEBUG:-1}
    volumes:
      - ./services/web_ui:/app
    depends_on:
      - content_extractor
      - summarizer
    ports:
      - "8080:8080"
    networks:
      - sambot_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  audio_storage:
    driver: local
  whisper_models:
    driver: local

networks:
  sambot_network:
    driver: bridge